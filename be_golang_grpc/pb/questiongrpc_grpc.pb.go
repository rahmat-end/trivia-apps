// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: questiongrpc.proto

package protogrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QuestionsGrpc_GetQuestions_FullMethodName = "/protogrpc.QuestionsGrpc/GetQuestions"
	QuestionsGrpc_GetQuestion_FullMethodName  = "/protogrpc.QuestionsGrpc/GetQuestion"
)

// QuestionsGrpcClient is the client API for QuestionsGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionsGrpcClient interface {
	GetQuestions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
	GetQuestion(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ResponseOne, error)
}

type questionsGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionsGrpcClient(cc grpc.ClientConnInterface) QuestionsGrpcClient {
	return &questionsGrpcClient{cc}
}

func (c *questionsGrpcClient) GetQuestions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, QuestionsGrpc_GetQuestions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionsGrpcClient) GetQuestion(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ResponseOne, error) {
	out := new(ResponseOne)
	err := c.cc.Invoke(ctx, QuestionsGrpc_GetQuestion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionsGrpcServer is the server API for QuestionsGrpc service.
// All implementations must embed UnimplementedQuestionsGrpcServer
// for forward compatibility
type QuestionsGrpcServer interface {
	GetQuestions(context.Context, *Empty) (*Response, error)
	GetQuestion(context.Context, *Id) (*ResponseOne, error)
	mustEmbedUnimplementedQuestionsGrpcServer()
}

// UnimplementedQuestionsGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedQuestionsGrpcServer struct {
}

func (UnimplementedQuestionsGrpcServer) GetQuestions(context.Context, *Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestions not implemented")
}
func (UnimplementedQuestionsGrpcServer) GetQuestion(context.Context, *Id) (*ResponseOne, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestion not implemented")
}
func (UnimplementedQuestionsGrpcServer) mustEmbedUnimplementedQuestionsGrpcServer() {}

// UnsafeQuestionsGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionsGrpcServer will
// result in compilation errors.
type UnsafeQuestionsGrpcServer interface {
	mustEmbedUnimplementedQuestionsGrpcServer()
}

func RegisterQuestionsGrpcServer(s grpc.ServiceRegistrar, srv QuestionsGrpcServer) {
	s.RegisterService(&QuestionsGrpc_ServiceDesc, srv)
}

func _QuestionsGrpc_GetQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionsGrpcServer).GetQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionsGrpc_GetQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionsGrpcServer).GetQuestions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionsGrpc_GetQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionsGrpcServer).GetQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionsGrpc_GetQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionsGrpcServer).GetQuestion(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// QuestionsGrpc_ServiceDesc is the grpc.ServiceDesc for QuestionsGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuestionsGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protogrpc.QuestionsGrpc",
	HandlerType: (*QuestionsGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQuestions",
			Handler:    _QuestionsGrpc_GetQuestions_Handler,
		},
		{
			MethodName: "GetQuestion",
			Handler:    _QuestionsGrpc_GetQuestion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "questiongrpc.proto",
}
